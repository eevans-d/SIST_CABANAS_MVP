╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║      🎯 GUÍA RÁPIDA DE VALIDACIÓN - SISTEMA MVP ALOJAMIENTOS 🎯              ║
║                                                                              ║
║                         PLAN DE EJECUCIÓN VISUAL                             ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────────────┐
│  📋 PREPARACIÓN PREVIA (5 minutos)                                           │
└──────────────────────────────────────────────────────────────────────────────┘

   1. Verificar containers corriendo:

      $ docker ps

      ✅ Debe mostrar: alojamientos_api, alojamientos_postgres,
                       alojamientos_redis, alojamientos_nginx

   2. Si no están corriendo:

      $ docker-compose up -d
      $ sleep 30  # Esperar que inicien

   3. Verificar API respondiendo:

      $ curl http://localhost:8000/api/v1/healthz

      ✅ Debe retornar JSON con "status": "healthy" o "degraded"


┌──────────────────────────────────────────────────────────────────────────────┐
│  🚀 OPCIÓN 1: EJECUCIÓN AUTOMÁTICA COMPLETA (Recomendada)                   │
└──────────────────────────────────────────────────────────────────────────────┘

   UN SOLO COMANDO ejecuta TODO el plan:

   $ ./execute_validation_plan.sh

   ⏱️  Duración: 30-60 minutos
   📊 Resultado: Reporte completo en reports/validation_YYYYMMDD_HHMMSS/

   ┌─────────────────────────────────────────────────────────────────────┐
   │  El script ejecutará automáticamente:                               │
   │                                                                      │
   │  ✓ Fase 1: Auditoría de código y DB                                 │
   │  ✓ Fase 2: Testing exhaustivo (unit, e2e, load)                     │
   │  ✓ Fase 3: Análisis de performance                                  │
   │  ✓ Fase 4: Security scan                                            │
   │  ✓ Fase 5: Validación constraint anti-doble-booking (CRÍTICO)       │
   │  ✓ Fase 6: Health checks y métricas                                 │
   │  ✓ Generación de reporte ejecutivo                                  │
   └─────────────────────────────────────────────────────────────────────┘

   Después de la ejecución:

   $ cat reports/validation_*/EXECUTIVE_SUMMARY.md
   $ cat reports/validation_*/constraint_validation.txt  # ⚡ CRÍTICO


┌──────────────────────────────────────────────────────────────────────────────┐
│  ⚡ OPCIÓN 2: VALIDACIÓN RÁPIDA (Solo lo Crítico)                            │
└──────────────────────────────────────────────────────────────────────────────┘

   Si solo necesitas verificar lo CRÍTICO (10 minutos):

   1. Constraint Anti-Doble-Booking (⚡ MÁXIMA PRIORIDAD)

      $ ./execute_validation_plan.sh
      [Seleccionar opción: 6]

      ✅ DEBE mostrar: "✅ ANTI-DOBLE-BOOKING VALIDADO"

   2. Tests Unitarios Básicos

      $ cd backend
      $ pytest tests/test_double_booking.py \
              tests/test_reservation_service.py -v

      ✅ DEBE mostrar: "100% passed"

   3. Health Check

      $ curl http://localhost:8000/api/v1/healthz | jq

      ✅ database.status: "ok"
      ✅ redis.status: "ok"


┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 OPCIÓN 3: VALIDACIÓN POR ÁREAS                                           │
└──────────────────────────────────────────────────────────────────────────────┘

   Ejecutar el script con menú interactivo:

   $ ./execute_validation_plan.sh

   ┌────────────────────────────────────────────────────┐
   │  Menú:                                             │
   │                                                    │
   │  1) Ejecución completa (todas las fases)           │
   │  2) Solo auditoría (Fase 1)                        │
   │  3) Solo testing (Fase 2)                          │
   │  4) Solo performance (Fase 3)                      │
   │  5) Solo seguridad (Fase 4)                        │
   │  6) Solo constraint validation (Fase 5) - CRÍTICO  │
   │  7) Solo health y métricas (Fase 6)                │
   │  0) Ejecución automática completa                  │
   └────────────────────────────────────────────────────┘


┌──────────────────────────────────────────────────────────────────────────────┐
│  🎯 CRITERIOS DE ÉXITO - ¿QUÉ BUSCAR EN LOS REPORTES?                       │
└──────────────────────────────────────────────────────────────────────────────┘

   🔴 CRÍTICO (Bloquea Producción si falla)

   □ constraint_validation.txt → "✅ ANTI-DOBLE-BOOKING VALIDADO"
   □ security_audit.txt → "OK: No .env files in git"
   □ bandit_report.json → 0 vulnerabilidades HIGH/CRITICAL
   □ health_check.json → database.status="ok" y redis.status="ok"

   🟠 IMPORTANTE (Pre Go-Live)

   □ coverage.json → percent_covered > 80
   □ load_test_results.txt → P95 Latency < 1000ms
   □ pytest_unit.log → "100% passed"
   □ rate_limit_test.txt → Rate limited responses > 0

   🟡 OPTIMIZACIÓN (Post Go-Live)

   □ complexity_report.txt → Identificar funciones complejas
   □ db_analysis.txt → Verificar índices utilizados
   □ outdated_packages.txt → Listar dependencias actualizables


┌──────────────────────────────────────────────────────────────────────────────┐
│  📁 ESTRUCTURA DE REPORTES GENERADOS                                         │
└──────────────────────────────────────────────────────────────────────────────┘

   reports/validation_YYYYMMDD_HHMMSS/
   │
   ├─ 📄 EXECUTIVE_SUMMARY.md ◄─── EMPEZAR AQUÍ
   │   └─ Tabla con estado de todos los criterios
   │
   ├─ 🔥 constraint_validation.txt ◄─── ⚡ CRÍTICO
   │   └─ Debe decir: "✅ ANTI-DOBLE-BOOKING VALIDADO"
   │
   ├─ 🧪 pytest_unit.log
   │   └─ Resultado de todos los tests unitarios
   │
   ├─ 📊 coverage_html/index.html
   │   └─ Reporte visual de cobertura (abrir en navegador)
   │
   ├─ 🔒 bandit_report.json
   │   └─ Vulnerabilidades de seguridad encontradas
   │
   ├─ ⚡ load_test_results.txt
   │   └─ Métricas de performance bajo carga
   │
   └─ 💊 health_check.json
       └─ Estado de todos los componentes del sistema


┌──────────────────────────────────────────────────────────────────────────────┐
│  🚨 TROUBLESHOOTING                                                          │
└──────────────────────────────────────────────────────────────────────────────┘

   PROBLEMA: Script no ejecuta

   $ chmod +x execute_validation_plan.sh
   $ ./execute_validation_plan.sh

   ───────────────────────────────────────────────────────────────────────

   PROBLEMA: "Containers no están corriendo"

   $ docker-compose up -d
   $ sleep 30
   $ docker ps  # Verificar que están UP

   ───────────────────────────────────────────────────────────────────────

   PROBLEMA: Tests fallan

   $ cat reports/validation_*/pytest_unit.log | grep FAILED
   $ cd backend
   $ pytest tests/test_XXXXX.py -v -s  # Test específico con detalle

   ───────────────────────────────────────────────────────────────────────

   PROBLEMA: Constraint validation falla (⚡ CRÍTICO)

   # Verificar extensión btree_gist
   $ docker exec alojamientos_postgres psql -U alojamientos \
     -d alojamientos_db -c \
     "SELECT * FROM pg_extension WHERE extname='btree_gist';"

   # Si no existe, instalar:
   $ docker exec alojamientos_postgres psql -U alojamientos \
     -d alojamientos_db -c \
     "CREATE EXTENSION btree_gist;"

   ───────────────────────────────────────────────────────────────────────

   PROBLEMA: Load test falla

   $ cd backend
   $ pip install locust
   $ locust -f tests_e2e/locustfile.py --help


┌──────────────────────────────────────────────────────────────────────────────┐
│  📚 DOCUMENTACIÓN COMPLETA                                                   │
└──────────────────────────────────────────────────────────────────────────────┘

   📖 PLAN_VERIFICACION_EXHAUSTIVO.md
      → Plan completo detallado (20,000+ líneas)
      → Todos los comandos específicos por fase
      → Configuraciones de herramientas
      → Ejemplos de código

   ⚡ PLAN_VALIDACION_RESUMEN.md
      → Resumen ejecutivo (1,500 líneas)
      → Comandos rápidos
      → Métricas y objetivos
      → Checklist pre-producción

   🗂️ INDICE_VALIDACION.md
      → Navegación entre documentos
      → Estructura de reportes
      → Referencias cruzadas

   🎯 QUICKSTART_VALIDACION.txt (este archivo)
      → Guía visual rápida
      → Comandos esenciales
      → Troubleshooting básico


┌──────────────────────────────────────────────────────────────────────────────┐
│  ✅ CHECKLIST FINAL                                                          │
└──────────────────────────────────────────────────────────────────────────────┘

   Antes de dar OK para producción:

   □ Script ejecutado completamente sin errores fatales
   □ EXECUTIVE_SUMMARY.md revisado
   □ constraint_validation.txt muestra ✅
   □ 0 vulnerabilidades HIGH/CRITICAL en bandit_report.json
   □ Coverage > 80% en coverage.json
   □ Database y Redis status="ok" en health_check.json
   □ P95 latency < 1000ms en load_test_results.txt
   □ No secrets en git (security_audit.txt)
   □ Todos los tests críticos passing (double_booking_tests.log)

   Si TODOS los ítems anteriores están ✅:

   🎉 SISTEMA VALIDADO Y LISTO PARA PRODUCCIÓN 🎉


┌──────────────────────────────────────────────────────────────────────────────┐
│  🚀 COMANDO PARA EMPEZAR AHORA                                               │
└──────────────────────────────────────────────────────────────────────────────┘

   $ ./execute_validation_plan.sh

   ⏱️  Tiempo: 30-60 minutos
   📊 Resultado: Validación completa del sistema


╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║                    ¡TODO LISTO PARA VALIDAR EL SISTEMA!                      ║
║                                                                              ║
║                      Sistema: MVP de Alojamientos                            ║
║                      Versión: 1.0                                            ║
║                      Fecha: 2025-10-08                                       ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

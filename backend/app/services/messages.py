"""Mensajes estructurados para WhatsApp con formato claro y amigable.

Proporciona funciones para generar mensajes formateados para diferentes
situaciones: confirmaciones, errores, disponibilidad, etc.
"""

from datetime import date, datetime
from decimal import Decimal
from typing import Any, Dict, Optional

import structlog

logger = structlog.get_logger()


def format_prereservation_confirmation(
    reservation: Dict[str, Any],
    accommodation: Dict[str, Any],
    payment_link: str,
    expiration_minutes: int = 60,
) -> str:
    """Genera mensaje de confirmaci√≥n de pre-reserva con todos los detalles.

    Args:
        reservation: Diccionario con datos de reserva (code, check_in, check_out, etc.)
        accommodation: Diccionario con datos del alojamiento (name, etc.)
        payment_link: URL de pago de Mercado Pago
        expiration_minutes: Tiempo de expiraci√≥n en minutos

    Returns:
        str: Mensaje formateado para WhatsApp con emojis y formato markdown
    """
    # Formatear fechas
    check_in = reservation.get("check_in")
    check_out = reservation.get("check_out")

    if isinstance(check_in, str):
        check_in = datetime.fromisoformat(check_in.replace("Z", "+00:00")).date()
    if isinstance(check_out, str):
        check_out = datetime.fromisoformat(check_out.replace("Z", "+00:00")).date()

    check_in_str = check_in.strftime("%d/%m/%Y") if isinstance(check_in, date) else str(check_in)
    check_out_str = (
        check_out.strftime("%d/%m/%Y") if isinstance(check_out, date) else str(check_out)
    )

    # Formatear montos
    total_price = reservation.get("total_price", 0)
    deposit_amount = reservation.get("deposit_amount", 0)

    if isinstance(total_price, (int, float, Decimal)):
        total_str = f"${float(total_price):.2f}"
    else:
        total_str = f"${total_price}"

    if isinstance(deposit_amount, (int, float, Decimal)):
        deposit_str = f"${float(deposit_amount):.2f}"
    else:
        deposit_str = f"${deposit_amount}"

    message = f"""‚úÖ *Pre-reserva Confirmada*

üìã *C√≥digo:* {reservation.get('code', 'N/A')}
üè† *Alojamiento:* {accommodation.get('name', 'N/A')}
üìÖ *Check-in:* {check_in_str}
üìÖ *Check-out:* {check_out_str}
üë• *Hu√©spedes:* {reservation.get('guests_count', 0)}
üí∞ *Total:* {total_str}
üíµ *Se√±a a pagar:* {deposit_str}

‚è∞ *Importante:* Esta pre-reserva expira en {expiration_minutes} minutos.

Para confirmar tu reserva, realiza el pago de la se√±a aqu√≠:
{payment_link}

Una vez acreditado el pago, recibir√°s la confirmaci√≥n definitiva.

¬øNecesitas ayuda? Responde a este mensaje."""

    return message


def format_reservation_confirmed(reservation: Dict[str, Any], accommodation: Dict[str, Any]) -> str:
    """Genera mensaje de confirmaci√≥n definitiva de reserva (post-pago).

    Args:
        reservation: Datos de reserva
        accommodation: Datos del alojamiento

    Returns:
        str: Mensaje de confirmaci√≥n final
    """
    check_in = reservation.get("check_in")
    check_out = reservation.get("check_out")

    if isinstance(check_in, str):
        check_in = datetime.fromisoformat(check_in.replace("Z", "+00:00")).date()
    if isinstance(check_out, str):
        check_out = datetime.fromisoformat(check_out.replace("Z", "+00:00")).date()

    check_in_str = check_in.strftime("%d/%m/%Y") if isinstance(check_in, date) else str(check_in)
    check_out_str = (
        check_out.strftime("%d/%m/%Y") if isinstance(check_out, date) else str(check_out)
    )

    message = f"""üéâ *¬°Reserva Confirmada!*

Tu pago ha sido acreditado exitosamente.

üìã *C√≥digo de Reserva:* {reservation.get('code', 'N/A')}
üè† *Alojamiento:* {accommodation.get('name', 'N/A')}
üìÖ *Check-in:* {check_in_str}
üìÖ *Check-out:* {check_out_str}

üìß Recibir√°s un email con los detalles completos y las instrucciones de llegada.

¬°Esperamos que disfrutes tu estad√≠a!

Para cualquier consulta, estamos a tu disposici√≥n."""

    return message


def format_error_date_overlap(accommodation_name: str, check_in: date, check_out: date) -> str:
    """Mensaje de error cuando las fechas no est√°n disponibles.

    Args:
        accommodation_name: Nombre del alojamiento
        check_in: Fecha de entrada solicitada
        check_out: Fecha de salida solicitada

    Returns:
        str: Mensaje de error amigable con sugerencia
    """
    check_in_str = check_in.strftime("%d/%m/%Y")
    check_out_str = check_out.strftime("%d/%m/%Y")

    return f"""‚ùå Lo siento, las fechas *{check_in_str}* a *{check_out_str}* no est√°n disponibles para *{accommodation_name}*.

Ya existe una reserva confirmada para ese per√≠odo.

¬øTe gustar√≠a:
‚Ä¢ Ver otras fechas disponibles?
‚Ä¢ Consultar disponibilidad de otro alojamiento?

Puedo ayudarte a encontrar la mejor opci√≥n üòä"""


def format_error_no_availability(check_in: date, check_out: date) -> str:
    """Mensaje cuando no hay disponibilidad en ning√∫n alojamiento.

    Args:
        check_in: Fecha de entrada solicitada
        check_out: Fecha de salida solicitada

    Returns:
        str: Mensaje con sugerencia de fechas alternativas
    """
    check_in_str = check_in.strftime("%d/%m/%Y")
    check_out_str = check_out.strftime("%d/%m/%Y")

    return f"""‚ùå No encontr√© disponibilidad del *{check_in_str}* al *{check_out_str}* en ninguno de nuestros alojamientos.

¬øQuieres que te sugiera fechas cercanas con disponibilidad?

Tambi√©n puedes consultar por fechas espec√≠ficas escribiendo, por ejemplo:
"Disponibilidad del 20 al 25 de diciembre" """


def format_error_invalid_dates(reason: Optional[str] = None) -> str:
    """Mensaje cuando las fechas ingresadas son inv√°lidas.

    Args:
        reason: Raz√≥n espec√≠fica del error (opcional)

    Returns:
        str: Mensaje explicando el problema con ejemplo
    """
    base_message = """‚ùå Las fechas que indicaste no son v√°lidas."""

    if reason:
        base_message += f"\n\n{reason}"

    base_message += """

Por favor, intenta nuevamente con este formato:
‚Ä¢ "Del 15 al 20 de diciembre"
‚Ä¢ "Disponibilidad para el fin de semana"
‚Ä¢ "Quiero reservar del 01/12 al 05/12" """

    return base_message


def format_error_capacity_exceeded(
    accommodation_name: str, max_capacity: int, requested: int
) -> str:
    """Mensaje cuando se excede la capacidad del alojamiento.

    Args:
        accommodation_name: Nombre del alojamiento
        max_capacity: Capacidad m√°xima
        requested: Cantidad de hu√©spedes solicitada

    Returns:
        str: Mensaje explicando la limitaci√≥n
    """
    return f"""‚ùå El alojamiento *{accommodation_name}* tiene capacidad para *{max_capacity} personas* y solicitaste para *{requested}*.

¬øTe gustar√≠a:
‚Ä¢ Ver alojamientos con mayor capacidad?
‚Ä¢ Reservar m√∫ltiples alojamientos?

Puedo ayudarte a encontrar la mejor combinaci√≥n üòä"""


def format_error_generic(error_context: Optional[str] = None) -> str:
    """Mensaje gen√©rico de error cuando no hay categor√≠a espec√≠fica.

    Args:
        error_context: Contexto adicional del error (opcional)

    Returns:
        str: Mensaje gen√©rico amigable
    """
    message = """üòï Ups, hubo un problema procesando tu solicitud.

¬øPodr√≠as reformular tu mensaje?"""

    if error_context:
        message += f"\n\n{error_context}"

    message += """

Si el problema persiste, puedes contactar directamente a soporte."""

    return message


def format_availability_response(
    accommodation: Dict[str, Any], check_in: date, check_out: date, price: Decimal
) -> str:
    """Mensaje mostrando disponibilidad de un alojamiento.

    Args:
        accommodation: Datos del alojamiento
        check_in: Fecha de entrada
        check_out: Fecha de salida
        price: Precio calculado para el per√≠odo

    Returns:
        str: Mensaje con detalles de disponibilidad
    """
    check_in_str = check_in.strftime("%d/%m/%Y")
    check_out_str = check_out.strftime("%d/%m/%Y")
    nights = (check_out - check_in).days

    return f"""‚úÖ *{accommodation.get('name', 'Alojamiento')}* est√° disponible

üìÖ Del {check_in_str} al {check_out_str} ({nights} noches)
üë• Capacidad: hasta {accommodation.get('capacity', 'N/A')} personas
üí∞ Precio total: ${float(price):.2f}

¬øQuieres reservar este alojamiento?
Responde "s√≠" o "reservar" para continuar.

Tambi√©n puedes consultar por otros alojamientos o fechas üòä"""


def format_payment_reminder(
    reservation_code: str, payment_link: str, minutes_remaining: int
) -> str:
    """Mensaje de recordatorio de pago pendiente.

    Args:
        reservation_code: C√≥digo de la reserva
        payment_link: URL de pago
        minutes_remaining: Minutos restantes antes de expiraci√≥n

    Returns:
        str: Mensaje de recordatorio
    """
    return f"""‚è∞ *Recordatorio de Pago*

Tu pre-reserva *{reservation_code}* expira en *{minutes_remaining} minutos*.

Para confirmar tu reserva, completa el pago de la se√±a aqu√≠:
{payment_link}

¬øNecesitas m√°s tiempo? Cont√°ctanos."""


def format_reservation_expired(reservation_code: str) -> str:
    """Mensaje cuando una pre-reserva ha expirado.

    Args:
        reservation_code: C√≥digo de la reserva expirada

    Returns:
        str: Mensaje informando la expiraci√≥n
    """
    return f"""‚è±Ô∏è Tu pre-reserva *{reservation_code}* ha expirado por falta de pago.

Las fechas han quedado liberadas nuevamente.

¬øQuieres volver a reservar? Puedo ayudarte a verificar disponibilidad üòä"""


def format_payment_approved(
    guest_name: str, reservation_code: str, check_in: str, check_out: str, accommodation_name: str
) -> str:
    """Mensaje cuando el pago fue aprobado exitosamente.

    Args:
        guest_name: Nombre del hu√©sped
        reservation_code: C√≥digo de la reserva
        check_in: Fecha de entrada (formato dd/mm/yyyy)
        check_out: Fecha de salida (formato dd/mm/yyyy)
        accommodation_name: Nombre del alojamiento

    Returns:
        str: Mensaje de confirmaci√≥n de pago aprobado
    """
    return (
        f"üéâ *¬°Pago confirmado!*\n\n"
        f"¬°Hola {guest_name}! Tu pago fue procesado exitosamente.\n\n"
        f"üìã *Reserva confirmada: {reservation_code}*\n"
        f"üè† {accommodation_name}\n"
        f"üìÖ {check_in} al {check_out}\n\n"
        f"‚úÖ *Ya ten√©s tu alojamiento asegurado*\n\n"
        f"Te estaremos enviando los detalles de acceso unos d√≠as antes del check-in.\n\n"
        f"¬°Gracias por elegirnos! üòä"
    )


def format_payment_rejected(guest_name: str, reservation_code: str, amount: str) -> str:
    """Mensaje cuando el pago fue rechazado.

    Args:
        guest_name: Nombre del hu√©sped
        reservation_code: C√≥digo de la reserva
        amount: Monto del pago rechazado (formato con separador de miles)

    Returns:
        str: Mensaje informando el rechazo del pago
    """
    return (
        f"‚ùå *Problema con el pago*\n\n"
        f"Hola {guest_name}, no pudimos procesar tu pago de *${amount}* para la reserva *{reservation_code}*.\n\n"
        f"üí≥ *Posibles causas:*\n"
        f"‚Ä¢ Fondos insuficientes\n"
        f"‚Ä¢ L√≠mite de la tarjeta excedido\n"
        f"‚Ä¢ Problema temporal del banco\n\n"
        f"üîÑ *¬øQu√© hacer ahora?*\n"
        f"Pod√©s intentar nuevamente con la misma tarjeta o usar otro m√©todo de pago.\n\n"
        f"¬øNecesit√°s ayuda? ¬°Escribinos!"
    )


def format_payment_pending(guest_name: str, reservation_code: str, amount: str) -> str:
    """Mensaje cuando el pago est√° pendiente de procesamiento.

    Args:
        guest_name: Nombre del hu√©sped
        reservation_code: C√≥digo de la reserva
        amount: Monto del pago pendiente (formato con separador de miles)

    Returns:
        str: Mensaje informando el estado pendiente del pago
    """
    return (
        f"‚è≥ *Pago en proceso*\n\n"
        f"Hola {guest_name}, recibimos tu pago de *${amount}* para la reserva *{reservation_code}*.\n\n"
        f"üîç *Estado actual: En revisi√≥n*\n\n"
        f"Esto puede suceder por:\n"
        f"‚Ä¢ Verificaciones de seguridad del banco\n"
        f"‚Ä¢ Pagos con transferencia bancaria\n"
        f"‚Ä¢ Horarios de procesamiento\n\n"
        f"‚è±Ô∏è *Tiempo estimado: 24-48 horas*\n\n"
        f"Te avisaremos apenas se confirme. ¬°Gracias por tu paciencia! üòä"
    )

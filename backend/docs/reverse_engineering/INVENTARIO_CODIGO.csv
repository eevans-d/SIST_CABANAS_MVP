tipo,nombre,path,detalle_clave
modelo,Accommodation,backend/app/models/accommodation.py,"id, uuid, name, type, capacity, base_price, weekend_multiplier, amenities JSON, photos JSON, location JSON, policies JSON, ical_export_token (unique), ical_import_urls JSON, last_ical_sync_at, active; índices: idx_accommodation_type, ix_accommodations_name, idx_accommodation_active"
modelo,Reservation,backend/app/models/reservation.py,"id, uuid, code (unique), accommodation_id FK, check_in, check_out, guest_name, guest_phone, guest_email, guests_count, nights, base_price_per_night, total_price, deposit_percentage, deposit_amount, paid_amount, reservation_status, payment_status, channel_source, expires_at, extended_once, lock_value, confirmed_at, cancelled_at, completed_at, internal_notes, special_requests; checks: ck_reservation_dates, ck_guests_positive, ck_total_price_positive; índices: idx_reservation_dates, idx_reservation_expires, ix_reservations_code, idx_reservation_guest_phone; EXCLUDE gist anti-overlap (ver DB_CONSTRAINTS.md)"
modelo,Payment,backend/app/models/payment.py,"id, uuid, reservation_id (FK CASCADE, nullable), provider, external_payment_id (unique), external_reference, status, amount, currency, event_first_received_at, event_last_received_at, events_count; índices: idx_payment_reservation, idx_payment_external_ref, uq_payment_external_id"
modelo,IdempotencyKey,backend/app/models/idempotency.py,"id (UUID pk), key (unique), endpoint, method, content_hash, response_status, response_body, expires_at (index), extra_metadata; índices: idx_idempotency_key_endpoint, ix_idempotency_keys_key, ix_idempotency_keys_endpoint"
router,Health,backend/app/routers/health.py,"GET /api/v1/healthz, GET /api/v1/readyz; chequeos DB/Redis/disk/ical/config; métricas: ICAL_LAST_SYNC_AGE_MIN"
router,Reservations,backend/app/routers/reservations.py,"POST /reservations/pre-reserve, POST /reservations/{code}/confirm, POST /reservations/{code}/cancel, GET /reservations/accommodations, GET /reservations/{code}"
router,WhatsApp,backend/app/routers/whatsapp.py,"GET /webhooks/whatsapp (verify), POST /webhooks/whatsapp (firma X-Hub-Signature-256 obligatoria; contrato mensaje unificado; NLU + pre-reserva automática)"
router,MercadoPago,backend/app/routers/mercadopago.py,"POST /webhook (x-signature v1; idempotencia en service)"
router,ICal,backend/app/routers/ical.py,"GET /ical/export/{accommodation_id}/{token}, POST /ical/import"
router,Audio,backend/app/routers/audio.py,"POST /audio/transcribe (Whisper faster, low-confidence -> needs_text)"
router,Admin,backend/app/routers/admin.py,"POST /admin/login, GET /admin/dashboard/stats, GET /admin/reservations, GET /admin/reservations/export.csv, POST /admin/actions/resend-email/{code}, GET /admin/calendar/availability, WebSocket /admin/ws?token=... (JWT + whitelist emails)"
servicio,ReservationService,backend/app/services/reservations.py,"pre-reserva con Redis lock + constraint Postgres; confirmación atómica; cancelación; emails best-effort; métricas: RESERVATIONS_*"
servicio,MercadoPagoService,backend/app/services/mercadopago.py,"Procesa webhook, idempotencia, vincula payments a reservations (detalles ver archivo)"
servicio,ICalService,backend/app/services/ical.py,"Exporta iCal con token HMAC, importa eventos, actualiza last_ical_sync_at"
servicio,AudioService,backend/app/services/audio.py,"Transcribe con ffmpeg + faster-whisper; retorna text, confidence; integra NLU"
servicio,NLU,backend/app/services/nlu.py,"Regex + dateparser determinístico; intents: disponibilidad, precio, reservar, servicios; slots: fechas/huéspedes"
servicio,WhatsApp,backend/app/services/whatsapp.py,"Envío de mensajes; manejo de plantillas; helper send_text_message"
core,Settings,backend/app/core/config.py,"Matriz de configuración (env); validadores DATABASE_URL y REDIS_URL con inyección de password; defaults seguros"
core,Security,backend/app/core/security.py,"JWT HS256; verificación firmas WhatsApp (HMAC-SHA256) y MercadoPago; token iCal HMAC con ICS_SALT"
core,Database,backend/app/core/database.py,"Session async + engine; helpers get_db; pool sizes configurables"
core,Redis,backend/app/core/redis.py,"Pool global; acquire_lock/release_lock (SET NX EX + lua)"
migraciones,alembic,backend/alembic/versions,"001_initial_schema, 002_create_payments, 003_payment_reservation_nullable, 004_add_last_ical_sync_at, 005_idempotency_keys, 002_perf_indexes (índices concurrentes)"

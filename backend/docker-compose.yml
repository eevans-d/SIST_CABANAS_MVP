version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    container_name: alojamientos_api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://alojamientos:${POSTGRES_PASSWORD}@db:5432/alojamientos_db
      - REDIS_URL=${REDIS_URL}
      - JOB_EXPIRATION_INTERVAL_SECONDS=${JOB_EXPIRATION_INTERVAL_SECONDS}
      - JOB_ICAL_INTERVAL_SECONDS=${JOB_ICAL_INTERVAL_SECONDS}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_APP_SECRET=${WHATSAPP_APP_SECRET}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      - MERCADOPAGO_ACCESS_TOKEN=${MERCADOPAGO_ACCESS_TOKEN}
      - MERCADOPAGO_WEBHOOK_SECRET=${MERCADOPAGO_WEBHOOK_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ICS_SALT=${ICS_SALT}
      - GUNICORN_WORKERS=2
      - GUNICORN_TIMEOUT=60
      - GUNICORN_GRACEFUL_TIMEOUT=30
      - GUNICORN_KEEP_ALIVE=75
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS}
      - RATE_LIMIT_WINDOW_SECONDS=${RATE_LIMIT_WINDOW_SECONDS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alojamientos_network
    expose:
      - "8000"
    volumes:
      - ./temp:/app/temp  # Para archivos temporales de audio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    container_name: alojamientos_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=alojamientos_db
      - POSTGRES_USER=alojamientos
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - alojamientos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alojamientos -d alojamientos_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # ports:
    #   - "5432:5432"  # ⚠️ NO EXPONER EN PRODUCCIÓN - Solo habilitar para debugging local

  redis:
    image: redis:7-alpine
    container_name: alojamientos_redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - alojamientos_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # ports:
    #   - "6379:6379"  # ⚠️ NO EXPONER EN PRODUCCIÓN - Solo habilitar para debugging local

  nginx:
    image: nginx:alpine
    container_name: alojamientos_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - alojamientos_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Contenedor para tareas programadas (iCal sync, cleanup)
  scheduler:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    container_name: alojamientos_scheduler
    restart: unless-stopped
    command: python -m app.jobs.scheduler
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://alojamientos:${POSTGRES_PASSWORD}@db:5432/alojamientos_db
      - REDIS_URL=${REDIS_URL}
      - JOB_EXPIRATION_INTERVAL_SECONDS=${JOB_EXPIRATION_INTERVAL_SECONDS}
      - JOB_ICAL_INTERVAL_SECONDS=${JOB_ICAL_INTERVAL_SECONDS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - alojamientos_network
    volumes:
      - ./temp:/app/temp

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  alojamientos_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

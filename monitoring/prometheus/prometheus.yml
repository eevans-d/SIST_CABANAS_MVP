# Prometheus Configuration
# Sistema MVP Alojamientos - Monitoring Stack

global:
  scrape_interval: 15s              # Scrape metrics every 15 seconds
  evaluation_interval: 15s          # Evaluate alert rules every 15 seconds
  external_labels:
    cluster: 'staging'
    environment: 'staging'
    project: 'alojamientos-mvp'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      timeout: 10s

# Load alert rules
rule_files:
  - '/etc/prometheus/rules/*.yml'

# Scrape configurations
scrape_configs:
  # ═══════════════════════════════════════════════════════════════════════════
  # APPLICATION METRICS
  # ═══════════════════════════════════════════════════════════════════════════

  # FastAPI Application - Main API
  - job_name: 'alojamientos-api'
    static_configs:
      - targets: ['sist_cabaas-backend-1:8000']  # Backend staging container
    metrics_path: '/metrics'
    scrape_interval: 10s
    scrape_timeout: 5s
    honor_labels: true
    params:
      format: ['prometheus']

  # ═══════════════════════════════════════════════════════════════════════════
  # DATABASE METRICS
  # ═══════════════════════════════════════════════════════════════════════════

  # PostgreSQL Exporter
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']
    scrape_interval: 30s
    scrape_timeout: 10s
    metric_relabel_configs:
      # Drop unnecessary high-cardinality metrics
      - source_labels: [__name__]
        regex: 'pg_stat_statements_.*'
        action: drop

  # ═══════════════════════════════════════════════════════════════════════════
  # CACHE METRICS
  # ═══════════════════════════════════════════════════════════════════════════

  # Redis Exporter
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s
    scrape_timeout: 10s

  # ═══════════════════════════════════════════════════════════════════════════
  # INFRASTRUCTURE METRICS
  # ═══════════════════════════════════════════════════════════════════════════

  # Node Exporter - Host metrics (CPU, RAM, Disk, Network)
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    scrape_timeout: 10s

  # cAdvisor - Container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    scrape_timeout: 10s
    metric_relabel_configs:
      # Keep only container-level metrics
      - source_labels: [__name__]
        regex: 'container_(cpu|memory|network|fs)_.*'
        action: keep

  # ═══════════════════════════════════════════════════════════════════════════
  # MONITORING STACK ITSELF
  # ═══════════════════════════════════════════════════════════════════════════

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s

  # Alertmanager monitoring
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 30s

# Remote write (optional - para long-term storage)
# Descomentar si usas Thanos, Cortex, o Prometheus remoto
# remote_write:
#   - url: "http://remote-prometheus:9090/api/v1/write"
#     queue_config:
#       capacity: 10000
#       max_shards: 5
#       min_shards: 1
#       max_samples_per_send: 5000
#       batch_send_deadline: 5s
#       min_backoff: 30ms
#       max_backoff: 100ms

# Storage retention
# Configurado via command line: --storage.tsdb.retention.time=30d

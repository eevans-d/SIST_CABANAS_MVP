name: CI - Tests and Linting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality (Linting)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort bandit[toml]

      - name: Check code formatting (Black)
        run: |
          black --check backend/app backend/tests || echo "⚠️  Black formatting issues found"

      - name: Check imports (isort)
        run: |
          isort --check-only backend/app backend/tests || echo "⚠️  Import order issues found"

      - name: Lint with Flake8
        run: |
          flake8 backend/app backend/tests --max-line-length=120 --extend-ignore=E203,W503 --count --statistics || echo "⚠️  Flake8 issues found"

      - name: Security check (Bandit)
        run: |
          bandit -r backend/app -ll -f json -o bandit-report.json || echo "⚠️  Security issues found"
          cat bandit-report.json || true

      - name: Upload Bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  tests-sqlite:
    name: Quick Tests (SQLite)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install fakeredis==2.23.2 pytest-cov

      - name: Run tests (SQLite fallback)
        env:
          ENVIRONMENT: test
          DATABASE_URL: sqlite+aiosqlite:///./test_fallback.db
          REDIS_URL: redis://localhost:6379/0
          RATE_LIMIT_ENABLED: "false"
          WHATSAPP_ACCESS_TOKEN: dummy
          WHATSAPP_APP_SECRET: dummy
          WHATSAPP_PHONE_ID: dummy
          MERCADOPAGO_ACCESS_TOKEN: dummy
        working-directory: backend
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=xml \
            --ignore=tests/test_double_booking.py \
            --ignore=tests/test_constraint_validation.py \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: sqlite
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  tests-postgres-redis:
    name: Full Tests (PostgreSQL + Redis)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: alojamientos
          POSTGRES_PASSWORD: password
          POSTGRES_DB: alojamientos_test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U alojamientos -d alojamientos_test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install fakeredis==2.23.2 pytest-cov

      - name: Wait for Postgres ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U alojamientos -d alojamientos_test_db && break
            sleep 2
          done

      - name: Prepare DB extensions
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U alojamientos -d alojamientos_test_db -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'
          psql -h localhost -U alojamientos -d alojamientos_test_db -c 'CREATE EXTENSION IF NOT EXISTS btree_gist;'

      - name: Run all tests (Postgres + Redis)
        env:
          ENVIRONMENT: test
          TEST_DATABASE_URL: postgresql+asyncpg://alojamientos:password@localhost:5432/alojamientos_test_db
          REDIS_URL: redis://localhost:6379/0
          TEST_REDIS_URL: redis://localhost:6379/0
          RATE_LIMIT_ENABLED: "false"
          WHATSAPP_ACCESS_TOKEN: dummy
          WHATSAPP_APP_SECRET: dummy
          WHATSAPP_PHONE_ID: dummy
          MERCADOPAGO_ACCESS_TOKEN: dummy
        working-directory: backend
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: postgres
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Safety
        run: pip install safety

      - name: Check dependencies for vulnerabilities
        run: |
          safety check -r backend/requirements.txt --json --output safety-report.json || echo "⚠️  Vulnerabilities found"
          cat safety-report.json || true

      - name: Upload Safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-security-report
          path: safety-report.json

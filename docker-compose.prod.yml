# ============================================================================
# üè† Sistema MVP de Automatizaci√≥n de Reservas - Production Deployment
# ============================================================================
#
# Configuraci√≥n hardened para producci√≥n con:
# - Nginx reverse proxy con SSL
# - Health checks exhaustivos
# - Resource limits optimizados
# - Persistent volumes
# - Auto-restart policies
# - Observabilidad opcional (Prometheus/Grafana)
#
# Uso:
#   cp .env.template .env.prod
#   # Editar .env.prod con valores reales
#   docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
#

version: '3.8'

services:
  # ============================================================================
  # üöÄ Backend (FastAPI)
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      # Core settings
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${POSTGRES_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # WhatsApp Business Cloud API
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
      - WHATSAPP_APP_SECRET=${WHATSAPP_APP_SECRET}
      - WHATSAPP_PHONE_ID=${WHATSAPP_PHONE_ID}
      - WHATSAPP_VERIFY_TOKEN=${WHATSAPP_VERIFY_TOKEN}
      
      # Mercado Pago
      - MERCADOPAGO_ACCESS_TOKEN=${MERCADOPAGO_ACCESS_TOKEN}
      - MERCADOPAGO_WEBHOOK_SECRET=${MERCADOPAGO_WEBHOOK_SECRET}
      
      # Security & Auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-24}
      - ICS_SALT=${ICS_SALT}
      
      # Application URLs
      - BASE_URL=${BASE_URL}
      - DOMAIN=${DOMAIN}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      
      # Performance & Limits
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW:-5}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-60}
      - RATE_LIMIT_WINDOW_SECONDS=${RATE_LIMIT_WINDOW_SECONDS:-60}
      
      # Audio & NLU
      - AUDIO_MODEL=${AUDIO_MODEL:-base}
      - AUDIO_MIN_CONFIDENCE=${AUDIO_MIN_CONFIDENCE:-0.6}
      
      # Background Jobs
      - JOB_EXPIRATION_INTERVAL_SECONDS=${JOB_EXPIRATION_INTERVAL_SECONDS:-60}
      - JOB_ICAL_INTERVAL_SECONDS=${JOB_ICAL_INTERVAL_SECONDS:-300}
      - ICAL_SYNC_MAX_AGE_MINUTES=${ICAL_SYNC_MAX_AGE_MINUTES:-20}
      
      # SMTP (Optional)
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      
      # Admin Panel
      - ADMIN_ALLOWED_EMAILS=${ADMIN_ALLOWED_EMAILS}
      - ADMIN_CSRF_SECRET=${ADMIN_CSRF_SECRET}
      
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - app_logs:/app/logs
      - audio_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ============================================================================
  # üåê Nginx Reverse Proxy
  # ============================================================================
  nginx:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      # Let's Encrypt certificates (if using certbot)
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # ============================================================================
  # üóÑÔ∏è PostgreSQL Database
  # ============================================================================
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/extensions.sql:/docker-entrypoint-initdb.d/02-extensions.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    # Security: No external ports exposed

  # ============================================================================
  # üî¥ Redis Cache & Locks
  # ============================================================================
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Security: No external ports exposed

  # ============================================================================
  # üìä Monitoring Stack (Optional - usar con --profile monitoring)
  # ============================================================================
  
  # Prometheus para m√©tricas del sistema
  prometheus:
    image: prom/prometheus:v2.48.0
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"  # Bind solo a localhost
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - app-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:10.2.2
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"  # Bind solo a localhost
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - app-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

# ============================================================================
# üíæ Persistent Volumes
# ============================================================================
volumes:
  # Database data (CR√çTICO: hacer backup regular)
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/cabanas/postgres
  
  # Redis data para persistencia de locks
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/cabanas/redis
  
  # Application logs
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/cabanas/app
  
  # Nginx logs
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/cabanas/nginx
  
  # Audio uploads temporales
  audio_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/cabanas/uploads
  
  # Monitoring data (opcional)
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================================================
# üåê Network Configuration
# ============================================================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-cabanas
